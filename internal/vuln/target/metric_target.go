package target

import (
	"github.com/ckotzbauer/vulnerability-operator/internal/vuln/grype"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

var (
	vulnMetric = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "vuln_operator_cves",
		Help: "Number of CVE occurrences.",
	}, []string{"cve", "severity", "package", "version", "type", "fix_state", "image_id", "pod_namespace", "pod_name", "container_name"})
)

type MetricTarget struct {
}

func NewMetricTarget() *MetricTarget {
	return &MetricTarget{}
}

func (t *MetricTarget) Initialize() {
	vulnMetric.Reset()
}

func (t *MetricTarget) ValidateConfig() error {
	return nil
}

func (t *MetricTarget) ProcessVulns(vulns []grype.Vulnerability) error {
	for _, v := range vulns {
		if v.FixState != "wont-fix" {
			for _, c := range v.Containers {
				vulnMetric.WithLabelValues(
					v.ID,
					v.Severity,
					v.Package,
					v.Installed,
					v.Type,
					v.FixState,
					v.ImageID,
					c.PodNamespace,
					c.PodName,
					c.ContainerName).Set(1)
			}
		}
	}

	return nil
}

func (t *MetricTarget) Finalize() error {
	return nil
}

package target

import (
	"encoding/json"
	"fmt"
	"os"

	"github.com/ckotzbauer/vulnerability-operator/internal/vuln"
	"github.com/ckotzbauer/vulnerability-operator/internal/vuln/grype"
	"github.com/spf13/viper"
)

type JsonTarget struct {
	vulns      []grype.Vulnerability
	reportsDir string
}

func NewJsonTarget() *JsonTarget {
	reportsDir := viper.GetString(vuln.ConfigKeyReportsDir)
	return &JsonTarget{vulns: []grype.Vulnerability{}, reportsDir: reportsDir}
}

func (t *JsonTarget) Initialize() {
}

func (t *JsonTarget) ValidateConfig() error {
	if t.reportsDir == "" {
		return fmt.Errorf("%s is empty", vuln.ConfigKeyReportsDir)
	}

	return nil
}

func (t *JsonTarget) ProcessVulns(vulns []grype.Vulnerability) error {
	t.vulns = append(t.vulns, vulns...)
	return nil
}

func (t *JsonTarget) Finalize() error {
	b, err := json.MarshalIndent(t.vulns, "", "  ")
	if err != nil {
		return err
	}

	err = os.MkdirAll(t.reportsDir, 0755)
	if err != nil {
		return err
	}

	return os.WriteFile(t.reportsDir+"/report.json", b, 0644)
}

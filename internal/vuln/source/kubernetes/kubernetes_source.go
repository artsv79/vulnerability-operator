package kubernetes

import (
	"github.com/ckotzbauer/vulnerability-operator/internal/vuln"
	"github.com/ckotzbauer/vulnerability-operator/internal/vuln/kubernetes"
	"github.com/ckotzbauer/vulnerability-operator/internal/vuln/source"
	"github.com/sirupsen/logrus"
	"github.com/spf13/viper"
)

type KubernetesSource struct {
	images                 []source.ScanItem
	namespaceLabelSelector string
	podLabelSelector       string
}

func NewKubernetesSource() *KubernetesSource {
	namespaceLabelSelector := viper.GetString(vuln.ConfigKeyNamespaceLabelSelector)
	podLabelSelector := viper.GetString(vuln.ConfigKeyPodLabelSelector)

	return &KubernetesSource{
		images:                 []source.ScanItem{},
		namespaceLabelSelector: namespaceLabelSelector,
		podLabelSelector:       podLabelSelector,
	}
}

func (g *KubernetesSource) ValidateConfig() error {
	return nil
}

func (g *KubernetesSource) Initialize() {
}

func (g *KubernetesSource) LoadScanItems() []source.ScanItem {
	g.images = []source.ScanItem{}
	client := kubernetes.NewClient()

	namespaces, err := client.Client.ListNamespaces(g.namespaceLabelSelector)
	if err != nil {
		logrus.WithError(err).Error("Failed to list namespaces")
		return g.images
	}

	images := client.Client.LoadImageInfos(namespaces, g.podLabelSelector)

	for _, i := range images {
		g.images = append(g.images, source.Image{KubeImage: i})
	}

	return g.images
}

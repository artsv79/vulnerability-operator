package git

import (
	"errors"
	"os"

	git "github.com/go-git/go-git/v5"
	"github.com/go-git/go-git/v5/plumbing"
	"github.com/go-git/go-git/v5/plumbing/transport"
	"github.com/go-git/go-git/v5/plumbing/transport/http"
	"github.com/sirupsen/logrus"
)

type GitAccount struct {
	Token string
}

func New(token string) GitAccount {
	return GitAccount{Token: token}
}

func (g *GitAccount) PrepareRepository(repo, path, branch string) {
	cloned := false
	r, err := git.PlainOpen(path)

	if err == git.ErrRepositoryNotExists {
		cloned = true
		r, err = git.PlainClone(path, false, &git.CloneOptions{
			URL:      repo,
			Progress: os.Stdout,
			Auth:     g.tokenAuth(),
		})
	}

	if err != nil {
		logrus.WithError(err).Error("Open or clone failed")
		return
	}

	w, err := r.Worktree()

	if err != nil {
		logrus.WithError(err).Error("Worktree failed")
		return
	}

	err = w.Checkout(&git.CheckoutOptions{
		Branch: plumbing.NewBranchReferenceName(branch),
	})

	if err != nil {
		logrus.WithError(err).Error("Checkout failed")
		return
	}

	if !cloned {
		err = w.Pull(&git.PullOptions{
			Auth:          g.tokenAuth(),
			ReferenceName: plumbing.NewBranchReferenceName(branch),
		})

		if err != nil && !errors.Is(err, git.NoErrAlreadyUpToDate) {
			logrus.WithError(err).Error("Pull failed")
			return
		}
	}

	logrus.Debug("Git-Repository is prepared!")
}

func (g *GitAccount) tokenAuth() transport.AuthMethod {
	return &http.BasicAuth{
		Username: "<token>", // this can be anything except an empty string
		Password: g.Token,
	}
}
